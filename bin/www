#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');

var cluster = require('cluster')
var numCPUs = require('os').cpus().length

var debug = require('debug')('jpdf:server');
var http = require('http');
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


if (cluster.isMaster) {
    for (var i = 0; i < numCPUs; i += 1) {
        cluster.fork();
    }
    cluster.on('exit', function (worker, code, signal) {
        // Replace the terminated workers
        console.log('Worker ' + worker.id + ' died :(');
        console.log(`worker ${worker.process.pid} died`);
        cluster.fork();
    });
} else {
    var server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
